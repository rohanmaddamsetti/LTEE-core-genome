core.dS
noncore.dN
noncore.dS
core.length
noncore.length
expected
expected.p
125/(125+27)
diversity.data.60 <- read.csv("/Users/Rohandinho/Desktop/Projects/LTEE-core-genome/results/60-genomes-results/ecoli-protein-diversity.csv")
diversity.data.15 <- read.csv("/Users/Rohandinho/Desktop/Projects/LTEE-core-genome/results/ecoli-protein-diversity.csv")
head(diversity.data.15)
head(diversity.data.60)
cor(diversity.data.15$diversity,diversity.data.60$diversity)
test <- merge(diversity.data.60,diversity.data.15)
head(test)
library(plyr)
library(dplyr)
rename(diversity.data.15,c("diversity"="diversity.15"))
rename(diversity.data.60,c("diversity"="diversity.60"))
head(diversity.data.15)
head(diversity.data.60)
diversity.data.60
diversity.data.60 <- rename(diversity.data.60,c("diversity"="diversity.60"))
head(diversity.data.60)
diversity.data.15 <- rename(diversity.data.15,c("diversity"="diversity.15"))
head(diversity.data15)
head(diversity.data.15)
test <- merge(diversity.data.15,diversity.data.60)
head(test)
cor(test$diversity.15,test$diversity.60)
quartz()
qplot(test$diversity.15~test$diversity.60)
qplot(data=test,x=diversity.15,y=diversity.60)
lm(test$diversity.60~test$diversity.15)
model1 = lm(test$diversity.60~test$diversity.15)
summary(model1)
t.test(test$diversity.60,test$diversity.15,paired=TRUE)
head(test)
diversity.diff = test$diversity.15- test$diversity.60
diversity.diff
sum(diversity.diff)
summary(model1)
model2 = lm(test$diversity.60~0+test$diversity.15)
summary(model2)
cor(test$diversity.60,test$diversity.15)
cor(test$diversity.60,test$diversity.15,method="spearman")
0.8*0.8
cor(test$diversity.60,test$diversity.15,method="pearson")
cor(test$diversity.60,test$diversity.15,method="kendall")
summary(model2)
1832/3872
3872-1832
1491-728
data.table=non.mutator.table
expected.p
head(final.data)
quartz()
test1
length(final.data)
length(final.data$note)
length(panortholog.data$note)
length(nonpanortholog.data$note)
quartz(test2)
quartz()
test1
test2
test3
test4
test1
test1
test1
test1
test1
test1
test
test1
test1
test1
test1
head(final.data2)
head(final.data2)
test1
test
test1
essentiality.G.score.plot
test2
test3
test2
test3
quartz()
essentiality.G.score.plot
essentiality.G.score.plot
head(final.data2)
essentiality.G.score.plot
essentiality.G.score.plot
essentiality.G.score.plot
essentiality.G.score.plot
essentiality.G.score.plot
head(KEIO.data)
testplot <- ggplot(data=KEIO.data,aes(x=note,y=MOPS_24hr_OD600)) + geom_point()
quartz()
testplot
testplot <- ggplot(data=KEIO.data,aes(x=note,y=EssentialityScore)) + geom_point()
testplot
testplot
head(final.data2)
head(proteome.sector.data)
head(proteome.sector.data)
first <- merge(KEIO.data,proteome.sector.data,all=TRUE)
head(core.summary)
head(nonmut.G.score.data)
head(core.summary)
core.and.proteome.data <- merge(proteome.sector.data,core.summary,all=TRUE)
head(nonmut.G.score.data2)
nonmut.G.score.data2
head(nonmut.G.score.data2)
head(nonmut.G.score.data3)
626+292+3509+1342
1939+1342+292+626
626+292
head(G.score.data)
Tenaillon.dN.summary
Tenaillon.dN.summary
data.frame(Tenaillon.dN.summary)
shiny.dN.summary
shiny.dN.summary
shiny.dN.summary
names(Tenaillon.dN.summary)
Tenaillon.dN.summary
shiny.dN.summary
data.frame(Tenaillon.dN.summary)
data.frame(shiny.dN.summary)
quartz()
mut.essentiality.G.score.plot
mut.essentiality.G.score.plot
mut.essentiality.G.score.plot
Tenaillon.dN.summary
shiny.dN.summary
quartz()
mut.G.score.diff.plot
difference.G.score.data
head(difference.G.score.data)
head(final.data2)
mut.G.score.diff.plot
diff.G.score.data
diff.G.score.data
mut.G.score.diff.plot
names(mutator.data)
mutator.KO.counts
mutator.KO.counts
nonmutator.KO.counts
nonmutator.KO.counts
mutator.KO.counts
mutator.KO.counts$gene <- list
mutator.KO.counts$gene_list
nonmutor.KO.counts$gene_list
nonmutator.KO.counts$gene_list
nonmutator.KO.counts$gene_list[19]
KO.counts
KO.counts
KO.counts
KO.counts
KO.counts
non.mutator.KO.counts
nonmutator.KO.counts
mutator.KO.counts
nonmutator.KO.counts
KO.counts
non.mutator.KO.counts
nonmutator.KO.counts
mutator.KO.counts
test = "Ara-1<br>Ara-1<br>Ara-1<br>Ara-1<br>Ara-1<br>Ara-1"
head(mutator.data$population)
mutator.data$population[1]
test
strsplit(test,"<br>")
unique(strsplit(test,"<br>"))
unique(unlist(strsplit(test,"<br>")))
test <- mutator.data[1:5,]
test
test %>% mutate(popset=unique(unlist(strsplit(population,"<br>"))))
test %>% mutate(popset=str(sort(unique(unlist(strsplit(population,"<br>"))))))
test1 <- test[1]$population
test1 <- test[1]
test1
test1 <- test[1,]
test1
strsplit(test1$population,"<br>")
test1$population
strsplit(test1$population,"<br>")
strsplit(test1$population[1],"<br>")
typeof(test1$population)
typeof(unlist(test1$population))
class(test1$population)
strsplit(as.character(test1$population),"<br>")
unlist(strsplit(as.character(test1$population),"<br>"))
unique(unlist(strsplit(as.character(test1$population),"<br>")))
unique(strsplit(as.character(test1$population),"<br>"))
unique(unlist(strsplit(as.character(test1$population),"<br>")))
test.mut.lineage.counts
test.mut.lineage.counts$popset
mut.lineage.counts$popset
mut.lineage.counts$popset
head(mutator.data)
head(mut.lineage.counts)
test <- mutator.data[1:5,]
test
test %>% mutate(popset=paste(sort(unique(unlist(strsplit(as.character(population),"<br>")))),sep="",collapse=","))
head(mut.data2)
as.character(mutator.data$population)
strsplit(as.character(mutator.data$population),"<br>")
lapply(strsplit(as.character(mutator.data$population),"<br>"),unique)
lapply(strsplit(as.character(mutator.data$population),"<br>"),function(x) sort(unlist(unique(x))))
lapply(strsplit(as.character(mutator.data$population),"<br>"),function(x) paste(sort(unlist(unique(x))),sep="",collapse=","))
unlist(lapply(strsplit(as.character(mutator.data$population),"<br>"),function(x) paste(sort(unlist(unique(x))),sep="",collapse=",")))
 mutator.data
mut.data2$popset
mut.data2$popset
mut.data2
data.frame(mut.data2)
data.frame(mut.data2)
data.frame(mut.data3)
data.frame(mut.data3)
data.frame(mut.data3)
mut.data3
mut.data3$gene_list
lineage.counts
lineage.counts
data.frame(lineage.counts)
names(mut.data3)
data.frame(lineage.counts)
nonmut.data4
mut.data4
lineage.counts
data.frame(lineage.counts)
lineage.counts
data.frame(lineage.counts)
class(lineage.counts$mut.lineages)
data.frame(lineage.counts)
names(kos.and.lineages)
quartz()
test.plot
nonmut.data3
data.frame(lineage.counts)
data.frame(lineage.counts)
lineage.counts
data.frame(lineage.counts)
test <- full_join(mut.data3,nonmut.data3)[1:5,]
test
test
test$mut.popset_union
test$popset_union
test <- lineage.counts[1:5,]
test$popset_union)
test$popset_union
test <- lineage.counts[1:5,]
test$popset_union
x = test$popset_union
y = test$mut.popset_union
string_union(x,y)
string_union(x,y)
string_union(x,y)
x
y
mini_df = cbind(x,y)
mini_df
mini_df %>% mutate(col3=paste(col1,col2,sep=",")
)
mini_df = data.frame(cbind(x,y))
mini_df %>% mutate(col3=paste(col1,col2,sep=",")
)
mini_df %>% mutate(col3=paste(x,y,sep=",")
)
mini_df$col3
mini_df$col3
mini_df <- mini_df %>% mutate(col3=paste(x,y,sep=","))
mini_df
mini_df$col3
mini_df %>%         mutate(count= length(unlist(strsplit(z,","))))
mini_df %>% mutate(count= length(unlist(strsplit(col3,","))))
mini_df %>% mutate(count= length(strsplit(col3,",")))
mini_df %>% mutate(count=strsplit(col3,","))
x
y
mini_df <- data.frame(cbind(x,y))
mini_df
sapply(mini_df$z,function(x) strsplit(x,","))
sapply(mini_df$z,function(x) unique(strsplit(x,",")))
type(sapply(mini_df$z,function(x) unique(strsplit(x,","))))
typeof(sapply(mini_df$z,function(x) unique(strsplit(x,","))))
typeof(sapply(mini_df$z,function(x) unlist(unique(strsplit(x,",")))))
sapply(mini_df$z,function(x) unlist(unique(strsplit(x,","))))
sapply(mini_df$z,function(x) unlist(unique(strsplit(x,",")))[x!=""]
)
mini.df <- mini_df
mini.df
sapply(mini.df$z,function(x) unique(unlist(strsplit(x,","))))
unlist(sapply(mini.df$z,function(x) unique(unlist(strsplit(x,",")))))
sapply(mini.df$z,function(x) unique(unlist(strsplit(x,","))))
sapply(mini.df$z,function(x) unique(unlist(strsplit(x,","))))
test2 <- sapply(mini.df$z,function(x) unique(unlist(strsplit(x,","))))
test2
test2 <- sapply(mini.df$z,function(x) unique(strsplit(x,",")))
test2
test2 <- sapply(mini.df$z,function(x) unlist(strsplit(x,","))
)
test2
test2 <- sapply(mini.df$z,function(x) unique(unlist(strsplit(x,",")))
)
test2
lineage.counts
lineage.counts$popset_union
lineage.count2$test
Tenaillon.dN.summary
names(Tenaillon.dN.summary)
names(G.score.data)
test
names(first.merge)
quartz()
top.mut.G.score.plot
head(shiny.mutator.data)
head(tenaillon.non.mutator.data)
head(all.KO.counts)
head(all.KO.counts)
names(shiny.non.mutator.data)
head(shiny.non.mutator.data)
shiny.non.mutator.data[2,]$gene_list
shiny.non.mutator.data[2,]$gene_nae
shiny.non.mutator.data[2,]$gene_name
names(processed.shiny.data)
names(all.KO.counts)
my.plot
my.plot
names(final.data)
my.plot
my.plot
all.KO.counts
my.plot
proteome.non.mutator.data
names(proteome.non.mutator.data)
proteome.non.mutator.data
proteome.mutator.data
head(core.proteome)
names(core.proteome)
proteome.non.mutator.data
proteome.non.mutator.data
names(tenaillon.non.mutator.data)
proteome.non.mutator.data
mean(proteome.non.mutator.data$G.score)
mean(proteome.mutator.data$G.score)
proteome.mutator.data2
proteome.non.mutator.data2
proteome.mutator.data2
proteome.non.mutator.data2
names(core.summary)
core.summary
head(core.proteome)
core.proteome2
head(core.proteome)
head(core.proteome)
core.proteome2
names(core.mutator.data)
var(proteome.mutator.data$G.score)
var(filter(proteome.mutator.data$G.score,panortholog==TRUE))
var(filter(proteome.mutator.data,panortholog==TRUE)$G.score)
var(filter(proteome.mutator.data,panortholog==FALSE)$G.score)
quartz()
G.score.dist.plot
G.score.dist.plot
head(core.mutator.data)
G.score.dist.plot
G.score.dist.plot
dist.plot2
prot.dist.plot
prot.dist.plot2
dist.plot
quartz()
prot.dist.plot
core.dist.plot
dist.plot
dist.plot2
warnings()
warnings()
G.score.data <- mut.G.score.data
head(mut.G.score.data)
warnings()
A.data$G.score
G.score.data <- mut.G.score.data
mutator=TRUE
head(G.positive.diversity)
diverge=FALSE
head(summary.C.data)
summary.C.data$category
quartz()
paste("help","me")
head(negatives)
negatives
length(core.mutator.data$G.score)
length(negatives$G.score)
length(noncore.negatives$G.score)
length(core.negatives)
mean(core.negatives$G.score)
mean(noncore.negatives$G.score)
length(core.negatives$G.score)
length(negatives$G.score)
[1] 1350
> core.negatives <- filter(negatives,panortholog==TRUE)
> noncore.negatives <- filter(negatives,panortholog==FALSE)
> length(noncore.negatives$G.score)
[1] 596
> length(core.negatives$G.score)
[1] 21
> mean(core.negatives$G.score)
[1] -1.333661
> mean(noncore.negatives$G.score)
[1] -1.327696
> length(core.negatives$G.score)
[1] 753
> var(core.negatives$G.score)
var(core.negatives$G.score)
var(noncore.negatives$G.score)
top.mut.G.score.plot
top.mut.G.score.plot
quartz()
mut.G.score.diff.plot
quartz())
quartz()
mut.essentiality.G.score.plot
mut.essentiality.G.score.plot
mut.essentiality.G.score.plot
mut.essentiality.G.score.plot
names(first.merge)
names(panortholog.data)
head(panortholog.data2)
test.plot <- ggplot(panortholog.data2,aes(x=EssentialityScore,colour=testcol)) + geom_histogram()
test.plot
quartz()
ggplot2(panortholog.set1,aes(x=EssentialityScore)) + geom_histogram()
ggplot(panortholog.set1,aes(x=EssentialityScore)) + geom_histogram()
quartz()
ggplot(panortholog.set2,aes(x=EssentialityScore)) + geom_histogram()
quartz()
ggplot(panortholog.set3,aes(x=EssentialityScore)) + geom_histogram()
ggplot(panortholog.set3,aes(x=EssentialityScore)) + geom_histogram()
quartz()
ggplot(panortholog.set1,aes(x=EssentialityScore)) + geom_histogram()
test.plot
test.plot <- ggplot(panortholog.data2,aes(x=EssentialityScore) + geom_histogram(aes(colour=testcol))
)
panortholog.data
panortholog.data2
select(panortholog.data,testcol,Observed.nonsynonymous.mutation)
select(panortholog.data,'testcol','Observed.nonsynonymous.mutation')
select(panortholog.data2,testcol,Observed.nonsynonymous.mutation)
top.57.panorthologs
length(single.hit.panorthologs$testcol)
single.hit.panorthologs
t.test(panortholog.set1$EssentialityScore,panortholog.set2$EssentialityScore)
t.test(panortholog.set2$EssentialityScore,panortholog.set3$EssentialityScore)
t.test(panortholog.set1$EssentialityScore,panortholog.set3$EssentialityScore)
non.mutator.table
head(full.table)
sum(non.mutator.table$dS)
non.mutator.table %>% filter(dS > 0)
non.mutator.table %>% arrange(genome) %>% filter(dS > 0)
p = 0.1477
p/(1-p)
(1-p)/p
p = 2265/(2265+2510)
p/(1-p)
p = 838/1698
p/(1-p)
head(data)
final.data2
head(meff.data)
head(meff.data)
head(first.merge)
head(diversity.data)
head(G.score.data2)
head(meff.data)
G.core.data2
head(G.score.data2)
head(diversity.data)
plot1
plot1
head(G.score.data2)
plot1
plot2
plot2
plot2
plot3
seq(0,2,by=0.5)
seq(2,by=0.5)
final.data2
final.data2
ES.positives
ES.negatives
ES.zeros
40-17
ES.positives
